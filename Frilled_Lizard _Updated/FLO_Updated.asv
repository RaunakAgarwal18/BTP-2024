%%% Designed and Developed by Mohammad Dehghani %%%
function[Best_score,Best_pos,FLO_curve]=FLO(SearchAgents,Max_iterations,lowerbound,upperbound,dimension,fitness)
lowerbound=ones(1,dimension).*(lowerbound);                              % Lower limit for variables
upperbound=ones(1,dimension).*(upperbound);                              % Upper limit for variables

%% INITIALIZATION
for i=1:dimension
    X(:,i) = lowerbound(i)+rand(SearchAgents,1).*(upperbound(i) - lowerbound(i));                          % Initial population
end

for i =1:SearchAgents
    L=X(i,:);
    fit(i)=fitness(L);
end
%%

for t=1:Max_iterations  % algorithm iteration

    %%  update: BEST proposed solution
    [Fbest , blocation]=min(fit);

    if t==1
        xbest=X(blocation,:);                                           % Optimal location
        fbest=Fbest;                                           % The optimization objective function
    elseif Fbest<fbest
        fbest=Fbest;
        xbest=X(blocation,:);
    end
    %%
    %%
    for i=1:SearchAgents
        %% 3.3.1 Phase 1: Hunting strategy (exploration)candidate_preys 
        prey_position = find(fit < fit(i));  % Find all individuals with better fitness

        if isempty(prey_position)  % If no better solutions are found
            selected_prey = xbest;  % Use the best known solution
        else
            if rand < 0.5
                selected_prey = xbest;  % With 50% probability, use the best solution
            else
                % Pick a random prey from the better solutions
                k = randperm(length(prey_position), 1);
                selected_prey = X(prey_position(k), :);  % Pick a random individual from better solutions
            end
        end
        %
        I=round(1+rand);
        X_new_P1=X(i,:)+rand(1,1).*(selected_prey-I.*X(i,:));%Eq(5)
        X_new_P1 = max(X_new_P1,lowerbound);X_new_P1 = min(X_new_P1,upperbound);

        % update position based on Eq (6)
        L=X_new_P1;
        fit_new_P1=fitness(L);
        if fit_new_P1<fit(i)
            X(i,:) = X_new_P1;
            fit(i) = fit_new_P1;
        end
        %% END Phase 1

        %%
        %% 3.3.2 Phase 2: Moving up the tree (exploitation)
        X_new_P2=X(i,:)+(1-2*rand).*((upperbound-lowerbound)/t);%Eq(7)
        X_new_P2 = max(X_new_P2,lowerbound./t);X_new_P2 = min(X_new_P2,upperbound./t);
        % update position based on Eq (8)
        L=X_new_P2;
        fit_new_P2=fitness(L);
        if fit_new_P2<fit(i)
            X(i,:) = X_new_P2;
            fit(i) = fit_new_P2;
        end
        %% END Phase 2
        %%
    end
    %%
    pc = 0.9 - 0.7 * (t / Max_iterations);
    pm = 0.1 + 0.4 * (t / Max_iterations);
    %% Genetic Algorithm to be implemented here
    offspring = [];
    for i = 1:2:SearchAgents
        if i+1 <= SearchAgents
            parent1 = X(i, :);
            parent2 = X(i+1, :);

            % Perform SBX Crossover
            [child1, child2] = SBX(parent1, parent2, pc, 10, lowerbound, upperbound);  % Crossover probability 0.8, nc = 10
            offspring = [offspring; child1; child2];
        end
    end

    % Apply Polynomial Mutation to offspring
    mutated_offspring = zeros(size(offspring));
    for i = 1:size(offspring, 1)
        mutated_offspring(i, :) = pm(offspring(i, :), pm, 50, lowerbound, upperbound);  % Mutation probability 0.3, nm = 20
    end

    % Combine original population and offspring
    combined_population = [X; mutated_offspring];
    combined_fitness = zeros(size(combined_population, 1), 1);
    
    % Evaluate fitness for the combined population
    for i = 1:size(combined_population, 1)
        combined_fitness(i) = fitness(combined_population(i, :));
    end
    
    % Sort the combined population based on fitness (ascending order)
    [~, sorted_indices] = sort(combined_fitness);
    combined_population = combined_population(sorted_indices, :);
    combined_fitness = combined_fitness(sorted_indices);
    
    % Retain the top 'SearchAgents' individuals based on fitness
    X = combined_population(1:SearchAgents, :);
    fit = combined_fitness(1:SearchAgents);
    % End Genetic Algorithm section
    

    best_so_far(t)=fbest;
    average(t) = mean (fit);

end
Best_score=fbest;
Best_pos=xbest;
FLO_curve=best_so_far;
end